import java.util.*;

import org.junit.Test;

import static org.junit.Assert.*;

// LC1577: https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/
//
// Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and
// type 2) under the following rules:
// Type 1: Triplet (i, j, k) if nums1[i]^2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and
// 0 <= j < k < nums2.length.
// Type 2: Triplet (i, j, k) if nums2[i]^2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and
// 0 <= j < k < nums1.length.
// Constraints:
// 1 <= nums1.length, nums2.length <= 1000
// 1 <= nums1[i], nums2[i] <= 10^5
public class NumTriplets {
    // Hash Table
    // time complexity: O(N*M), space complexity: O(N+M)
    // 15 ms(94.72%), 38.4 MB(99.82%) for 92 tests
    public int numTriplets(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map1 = getMap(nums1);
        Map<Integer, Integer> map2 = getMap(nums2);
        return numTriplets(map1, map2) + numTriplets(map2, map1);
    }

    private Map<Integer, Integer> getMap(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        return map;
    }

    private int numTriplets(Map<Integer, Integer> map1, Map<Integer, Integer> map2) {
        long res = 0;
        for (int x : map2.keySet()) {
            long square = (long)x * x;
            for (int y : map1.keySet()) {
                if (square % y != 0) { continue; }

                int z = (int)(square / y);
                int count = map1.getOrDefault(z, 0);
                count *= (y == z) ? (count - 1) : map1.get(y);
                res += count * map2.get(x);
            }
        }
        return (int)(res / 2);
    }

    // Hash Table
    // time complexity: O(N*M), space complexity: O(N+M)
    // 272 ms(16.81%), 38.6 MB(99.41%) for 92 tests
    public int numTriplets2(int[] nums1, int[] nums2) {
        return count(nums1, nums2) + count(nums2, nums1);
    }

    private int count(int[] nums1, int[] nums2) {
        int res = 0;
        for (int x : nums1) {
            Map<Long, Integer> map = new HashMap<>();
            long square = (long)x * x;
            for (long y : nums2) {
                if (square % y == 0) {
                    res += map.getOrDefault(square / y, 0);
                }
                map.put(y, map.getOrDefault(y, 0) + 1);
            }
        }
        return res;
    }

    void test(int[] nums1, int[] nums2, int expected) {
        assertEquals(expected, numTriplets(nums1, nums2));
        assertEquals(expected, numTriplets2(nums1, nums2));
    }

    @Test public void test() {
        test(new int[] {7, 4}, new int[] {5, 2, 8, 9}, 1);
        test(new int[] {1, 1}, new int[] {1, 1, 1}, 9);
        test(new int[] {7, 7, 8, 3}, new int[] {1, 2, 9, 7}, 2);
        test(new int[] {4, 7, 9, 11, 23}, new int[] {3, 5, 1024, 12, 18}, 0);
        test(new int[] {100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000},
             new int[] {100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
                        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000}, 14127750);
    }

    public static void main(String[] args) {
        String clazz = new Object() {
        }.getClass().getEnclosingClass().getSimpleName();
        org.junit.runner.JUnitCore.main(clazz);
    }
}
