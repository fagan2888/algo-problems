import java.util.*;
import java.util.function.Function;

import org.junit.Test;
import static org.junit.Assert.*;

// LC446: https://leetcode.com/problems/arithmetic-slices-ii-subsequence/
//
// A zero-indexed array A consisting of N numbers is given. A subsequence slice
// of that array is any sequence of integers (P0, P1, ..., Pk) such that
// 0 ≤ P0 < P1 < ... < Pk < N.
// A subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the
// sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic.
// Return the number of arithmetic subsequence slices in the array A.
// The input contains N integers. Every integer is in the range of -2 ^ 31 and
// 2 ^ 31-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 2 ^ 31-1.
public class ArithmeticSlices2 {
    // Dynamic Programming + Hash Table
    // time complexity: O(N ^ 2)
    // Time Limit Exceeded(WHY???)
    public int numberOfArithmeticSlices(int[] A) {
        int n = A.length;
        Map<Long, Integer> map = new HashMap<>();
        int count = 0;
        // or:
        // for (int i = 0; i < n; i++) {
        // for (int j = 0; j < i; j++) {
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                long d = (long)A[j] - A[i];
                long key1 = composeKey(i, d);
                long key2 = composeKey(j, d);
                int v = map.getOrDefault(key2, 0);
                map.put(key1, map.getOrDefault(key1, 0) + v + 1);
                count += v;
            }
        }
        return count;
    }

    private long composeKey(int i, long d) {
        return ((long)i) << 40 ^ (d >= 0 ? d : (-d) | (1L << 32));
    }

    // 2D-Dynamic Programming(Bottom-Up)
    // time complexity: O(N ^ 3)
    // beats N/A(339 ms for 99 tests)
    public int numberOfArithmeticSlices2(int[] A) {
        int n = A.length;
        int[][] dp = new int[n][n];
        int count = 0;
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                long d = (long)A[j] - A[i];
                for (int k = j + 1; k < n; k++) {
                    if ((long)A[k] - A[j] == d) {
                        dp[i][j] += 1 + dp[j][k];
                        count += 1 + dp[j][k];
                    }
                }
            }
        }
        return count;
    }

    // 2D-Dynamic Programming(Top-Down)
    // time complexity: O(N ^ 3)
    // beats N/A(482 ms for 99 tests)
    public int numberOfArithmeticSlices3(int[] A) {
        int n = A.length;
        int[][] memo = new int[n][n];
        for (int[] m : memo) {
            Arrays.fill(m, -1);
        }
        int res = 0;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                res += count(A, i, j, memo);
            }
        }
        return res;
    }

    private int count(int[] A, int first, int second, int[][] memo) {
        if (memo[first][second] >= 0) return memo[first][second];

        int n = A.length;
        int count = 0;
        long diff = (long)A[second] - A[first];
        for (int i = second + 1; i < n; i++) {
            if ((long)A[i] - A[second] == diff) {
                count += 1 + count(A, second, i, memo);
            }
        }
        return memo[first][second] = count;
    }

    void test(String name, Function<int[], Integer> count, int[] nums, int expected) {
        long t1 = System.nanoTime();
        assertEquals(expected, (int)count.apply(nums));
        if (nums.length > 50) {
            System.out.format("%s: %.3f ms\n", name, (System.nanoTime() - t1) * 1e-6);
        }
    }

    void test(int[] nums, int expected) {
        ArithmeticSlices2 a = new ArithmeticSlices2();
        test("numberOfArithmeticSlices", a::numberOfArithmeticSlices, nums, expected);
        test("numberOfArithmeticSlices2", a::numberOfArithmeticSlices2, nums, expected);
        test("numberOfArithmeticSlices3", a::numberOfArithmeticSlices3, nums, expected);
    }

    @Test
    public void test() {
        test(new int[] {28, 15, 2, 2}, 2);
        test(new int[] {2, 4}, 0);
        test(new int[] {2, 4, 6}, 1);
        test(new int[] {2, 4, 6, 8, 10}, 7);
        test(new int[] {0, 2000000000, -294967296}, 0);
        test(new int[] {-2147483648, 0, -2147483648}, 0);
        test(new int[] {79, 20, 64, 28, 67, 81, 60, 58, 97, 85, 92, 96, 82, 89,
                        46, 50, 15, 2, 36, 44, 54, 2, 90},  11);
    }

    @Test
    public void test2() {
        test(new int[] {79, 20, 64, 28, 67, 81, 60, 58, 97, 85, 92, 96, 82, 89,
                        46, 50, 15, 2, 36, 44, 54, 2, 90, 37, 7, 79, 26, 40, 34,
                        67, 64, 28, 60, 89, 46, 31, 9, 95, 43, 19, 47, 64, 48,
                        95, 80, 31, 47, 19, 72, 99, 28, 46, 13, 9, 64, 4, 68,
                        74, 50, 28, 69, 94, 93, 3, 80, 78, 23, 80, 43, 49, 77,
                        18, 68, 28, 13, 61, 34, 44, 80, 70, 55, 85, 0, 37, 93,
                        40, 47, 47, 45, 23, 26, 74, 45, 67, 34, 20, 33, 71, 48,
                        96},  1030);
        test(new int[] {
            -27132718, -1026567091, -1096113402, 1875897264, 719631573, 997805724,
            -1619930672, 346753120, 211237623, -1956889386, 342725508, -91034266,
            -1214139569, -1588288781, 1670860329, 378309061, -238766940, 644330323,
            242511466, -1025223707, 1840859323, 282435774, 1385699764, 789998790,
            -1769189553, -1544667666, -1772659494, 1081067712, 882781691, -1960293712,
            -2109022246, 2088706652, -1183723158, 833331357, 440578407, -1668211865,
            -1137588055, 277102514, -656983457, 482676662, 456062819, -1742391718,
            -900071735, -259773706, 428579675, 519323864, 1214320590, -500470055,
            -499481385, -1427983600, 155007844, 1700710011, -766676125, 1182550668,
            22766574, 601638874, -90792153, 32263579, -239160755, 434824715,
            1036079352, 1262329438, 1558895459, 792473917, 518859435, 1869733833,
            -662282156, -1925761028, -1545724268, -1760474762, 307400072, 1034770934,
            1197466420, 610025050, 1694125368, 1468243914, 509107662, -252645068,
            -651295571, -1303889311, 1879182312, 653655508, 1853944141, -2064222956,
            -523821139, 1906328643, 1008764353, 247849329, -1417071546, 492851389,
            277660888, 2022470916, -1129297029, 2044353508, 1390890927, -1455414881,
            1449232624, 1729618072, 380350795, -1952585922, 405328770, 1470357310,
            -1318390362, -802310179, 1635863008, 217289910, -15419812, 342485600,
            793663008, 1981898021, -918911759, 1288807762, 1825872671, -1564739100,
            -204745169, 1311944748, 1665421337, 688192920, -427139678, 2025335427,
            936476515, 196259567, -710782819, 2019870541, -424695778, 1736122891,
            844062451, 1301566407, -957516893, 87843331, -1746472388, 2039934360,
            1757385748, 2010942248, 628046897, -1933184090, 1282938743, -608188006,
            -1308520366, 1945253877, 2062751447, -1095459179, 1666576458, 2019188466,
            -1478664559, -367837207, -518376619, -1557651286, -1535578135, -752267753,
            -442606703, 829378080, -167655142, -1341056330, -23807124, -2121046104,
            1942193301, 1349791796, -1320777038, 709827676, 528703422, -10222965,
            664482687, 1980356476, -2131946583, 1155371118, 520619727, -2029709993,
            -1034682396, -1190439592, 806534061, 1212875733, 739589195, -519508539,
            557740230, -811829676, 1744757827, 655590355, 859021493, 615533601,
            437945011, -1753288549, 1428593308, 1469987010, 947227083, -1880417028,
            -1618659675, 775209762, 941121748, -1886726217, -619819813, -466168346,
            2127364859, 956204467, 988925076, -1906318955, 1066330174, -1820912757,
            -1453012664, -154433079, -1274715851, 1283646811, -1157670488, -997134050,
            -1832674170, 1043177864, -234481033, 1180834271, -1030283427, 1598239457,
            -1052317568, -1374051468, -1141050064, -1544456125, 1935288713, -1490991347,
            -581440845, -70449178, -755399812, -212973718, 1250901124, -1310142019,
            -1670713027, -282713104, -1777134778, 2040026634, 1794419238, -62250948,
            -823963578, -1081348272, -883168380, 923364891, -123753913, 108033287,
            -1387099190, 1835068556, -689428767, -710973249, -378302588, -229414445,
            430372249, 392389984, 1522678257, -1177693311, -242919592, -540740423,
            -1367430297, 1360880690, -854949136, 855099994, -2140778527, 1843513080,
            -995907996, 1400801327, 409876833, -12209911, 187232594, -1975709539,
            368170, -465817669, 1465855391, -583508789, 1333277353, 1084257377,
            -755934352, -2001364095, -629742636, 1595682946, 1821336529, 802709778,
            -971349072, 1157563145, -1386143822, 1735148286, -1243229077, -657725620,
            -1997731127, -1454721179, -1696766979, 580397874, -301845957, -98712332,
            1757057913, 929578591, 343611098, -366909974, 1914607272, -1103367014,
            1850675598, 1113316919, -1878031655, -513261502, -1097168404, -1178634528,
            -1841353177, -637780003, 728489980, -825761315, -2093518842, -1172713195,
            -775651376, -1940457401, -170186711, 1747313966, -1720222322, 96776084,
            1336612983, 1533125705, -341613607, -1100575541, -1013097629, 567113710,
            1602455754, 253225075, -190145350, -1548405339, 2040443761, -1348648860,
            -804649866, 1199140895, -1609373231, -723359565, -308244794, -72388052,
            -242846629, 1680436026, -1265603878, 422131457, -704607718, 647014891,
            1492244073, -893753672, -23636810, 135621825, 498605034, 807059710,
            -811859310, -2127943572, -34534248, -1666921629, -576072366, -41669929,
            -292047878, 1971955443, 53423947, -506604655, 1536774693, -545070753,
            1674958485, 1050809155, -1945865642, -2101640713, 523038540, 91594349,
            -642321974, -131475196, 1950119325, -442804531, 696674704, -618350619,
            -1130110618, -1353440793, -48955990, -1374578253, 268635546, 971969062,
            634381, -226512395, 1265880273, -1951852426, -1373637112, 693900475,
            1671510877, 1340711390, 825864790, -1772662229, 644094690, 1681648752,
            1317233060, -977390500, -31915611, -1744042501, -1574215203, 830928286,
            671287433, 1506849896, -409896785, -864401510, -910263103, -349364131,
            1784621973, 661157911, 1081980244, 1773932484, -715153743, -2055168987,
            1668024327, -849814112, 2028257556, 783023022, 684901810, -2130596711,
            808057560, -521676994, -602110539, 401185284, -384661836, -887940209,
            526921407, 1493739383, -367884008, -285708456, 336043390, -99391364,
            -1726699104, -105646349, 1116344073, -904680153, 1585885756, 1186681001,
            199283624, -495548085, -1905042026, 1188960248, -2040435539, -1876458629,
            -1085621664, 823682688, -971450920, 1771039078, 238752562, -1653125719,
            1828540248, -422469468, 268543081, 733102714, 1016158297, 1124344772,
            -1922562008, -1009930131, 158269188, -2129676492, 1239234967, 1381816626
        },  0);
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("ArithmeticSlices2");
    }
}
