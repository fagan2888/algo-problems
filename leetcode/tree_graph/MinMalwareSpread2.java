import java.util.*;

import org.junit.Test;
import static org.junit.Assert.*;

import common.DisjointSet;

// LC928: https://leetcode.com/problems/minimize-malware-spread-ii/
//
// In a network of nodes, each node i is directly connected to another node j if
// and only if graph[i][j] = 1. Some nodes initial are initially infected by 
// malware.  Whenever two nodes are directly connected and at least one of those
// two nodes is infected by malware, both nodes will be infected by malware.  
// This spread of malware will continue until no more nodes can be infected in 
// this manner. Suppose M(initial) is the final number of nodes infected with 
// malware in the entire network, after the spread of malware stops.
// We will remove one node from the initial list, completely removing it and any
// connections from this node to any other node.  Return the node that if 
// removed, would minimize M(initial).  If multiple nodes could be removed to 
// minimize M(initial), return such a node with the smallest index.
public class MinMalwareSpread2 {
    // Union Find
    // time complexity: O(N ^ 2 * M), space complexity: O(N)
    // beats %(32 ms for 39 tests)
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int res = -1;
        int min = graph.length + 1;
        for (int i : initial) {
            int cur = infected(graph, initial, i);
            if (min > cur || min == cur && i < res) {
                min = cur;
                res = i;
            }
        }
        return res;
    }

    private int infected(int[][] graph, int[] initial, int excluded) {
        int n = graph.length;
        DisjointSet ds = new DisjointSet(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1 && i != excluded && j != excluded) {
                    ds.union(i, j);
                }
            }
        }
        int[] id = ds.getParent();
        Set<Integer> counted = new HashSet<>();
        int res = 0;
        for (int v : initial) {
            if (v == excluded) continue;
            int root = id[v];
            while (root >= 0) {
                root = id[root];
            }
            if (counted.add(root)) {
                res -= root;
            }
        }
        return res;
    }

    // Union Find + Hash Table
    // time complexity: O(N ^ 2), space complexity: O(N)
    // beats %(16 ms for 39 tests)
    public int minMalwareSpread2(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        boolean[] infected = new boolean[n];
        for (int i : initial) {
            infected[i] = true;
        }
        for (int i = 0; i < n; i++) {
            if (infected[i]) continue;

            for (int j = 0; j < n; j++) {
                if (!infected[j] && graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        int[] count = new int[n];
        Map<Integer, Set<Integer>> nodeToComponents = new HashMap<>();
        for (int i : initial) {
            Set<Integer> components = new HashSet<>();
            for (int j = 0; j < n; j++) {
                if (!infected[j] && graph[i][j] == 1) {
                    components.add(dsu.find(j));
                }
            }
            nodeToComponents.put(i, components);
            for (int c : components) {
                count[c]++;
            }
        }
        int res = -1;
        int max = -1;
        for (int u : nodeToComponents.keySet()) {
            Set<Integer> components = nodeToComponents.get(u);
            int score = 0;
            for (int c : components) {
                if (count[c] == 1) {
                    score += dsu.size(c);
                }
            }
            if (score > max || score == max && u < res) {
                max = score;
                res = u;
            }
        }
        return res;
    }

    class DSU {
        private int[] id;
        private int[] size;

        DSU(int n) {
            id = new int[n];
            for (int x = 0; x < n; x++) {
                id[x] = x;
            }
            size = new int[n];
            Arrays.fill(size, 1);
        }

        public int find(int x) {
            if (id[x] != x) {
                id[x] = find(id[x]);
            }
            return id[x];
        }

        public void union(int x, int y) {
            int xRoot = find(x);
            int yRoot = find(y);
            id[xRoot] = yRoot;
            size[yRoot] += size[xRoot];
        }

        public int size(int x) {
            return size[find(x)];
        }
    }

    // DFS + Recursion
    // time complexity: O(N ^ 2), space complexity: O(N)
    // beats 88.70%(74 ms for 39 tests)
    public int minMalwareSpread3(int[][] graph, int[] initial) {
        int n = graph.length;
        boolean[] infected = new boolean[n];
        for (int x : initial) {
            infected[x] = true;
        }
        @SuppressWarnings("unchecked")
        List<Integer>[] infectedBy = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            infectedBy[i] = new ArrayList<>();
        }
        for (int i : initial) {
            Set<Integer> seen = new HashSet<>();
            dfs(graph, infected, i, seen);
            for (int j : seen) {
                infectedBy[j].add(i);
            }
        }
        int[] contribution = new int[n];
        for (int i = 0; i < n; i++) {
            if (infectedBy[i].size() == 1) {
                contribution[infectedBy[i].get(0)]++;
            }
        }
        int res = -1;
        int max = -1;
        for (int u : initial) {
            int score = contribution[u];
            if (score > max || score == max && u < res) {
                res = u;
                max = score;
            }
        }
        return res;
    }

    private void dfs(int[][] graph, boolean[] infected, int u, Set<Integer> visited) {
        for (int v = 0; v < graph.length; v++) {
            if (graph[u][v] == 1 && !infected[v] && visited.add(v)) {
                dfs(graph, infected, v, visited);
            }
        }
    }

    void test(int[][] graph, int[] initial, int expected) {
        assertEquals(expected, minMalwareSpread(graph, initial));
        assertEquals(expected, minMalwareSpread2(graph, initial));
        assertEquals(expected, minMalwareSpread3(graph, initial));
    }

    @Test
    public void test() {
        test(new int[][] {{1, 1, 0, 0}, {1, 1, 1, 0}, {0, 1, 1, 1}, {0, 0, 1, 1}}, new int[] {0, 1},
                1);
        test(new int[][] {{1, 1, 0}, {1, 1, 0}, {0, 0, 1}}, new int[] {0, 1}, 0);
        test(new int[][] {{1, 1, 0}, {1, 1, 1}, {0, 1, 1}}, new int[] {0, 1}, 1);
        test(new int[][] {
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                {0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}},
                new int[] {1, 6, 35, 5, 27, 32}, 32);
    }

    public static void main(String[] args) {
        String clazz = new Object() {}.getClass().getEnclosingClass().getSimpleName();
        org.junit.runner.JUnitCore.main(clazz);
    }
}
