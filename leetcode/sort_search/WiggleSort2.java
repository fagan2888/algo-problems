import java.util.*;

import org.junit.Test;
import static org.junit.Assert.*;

// https://leetcode.com/problems/wiggle-sort-ii/
//
// Given an unsorted array nums, reorder it such that
// nums[0] < nums[1] > nums[2] < nums[3]....
// Note:
// You may assume all input has valid answer.
// Follow Up:
// Can you do it in O(n) time and/or in-place with O(1) extra space?
public class WiggleSort2 {
    // time complexity: O(N), space complexity: O(1)
    // beats 49.13%(20 ms)
    public void wiggleSort(int[] nums) {
        int n = nums.length;
        int tieIndex = -1;
        for (int i = 1, j = 1, sign = 1; i < n; i++, sign *= -1) {
            int last = nums[i - 1];
            for (j = i; j < n && nums[j] == last; j++) {}
            if (j == n) {
                tieIndex = i - 1;
                break;
            }
            if (j > i) {
                swap(nums, i, j);
            }
            if ((nums[i] - last) * sign < 0) {
                swap(nums, i - 1, i);
            }
        }
        if (tieIndex < 0) return;

        int tieVal = nums[tieIndex];
        // FIXME: may have bug
        for (int i = 0, j = tieIndex + tieIndex % 2; i < n && j < n; i++) {
            if (nums[i] == tieVal) continue;

            if (i % 2 == 0) {
                if (nums[i] < tieVal) {
                    if (nums[i + 1] > tieVal && (i == 0 || nums[i - 1] > tieVal)) {
                        swap(nums, i, j);
                        j += 2;
                    } else if (nums[i + 1] < tieVal) {
                        swap(nums, i, j);
                        swap(nums, i, i + 1);
                        j += 2;
                    }
                } else {
                    if (nums[j - 1] == tieVal) {
                        swap(nums, i, j);
                        swap(nums, j, j - 1);
                    } else if (j + 1 < n) {
                        swap(nums, i, j + 1);
                    }
                    j += 2;
                }
            } else if ((i == 0 || nums[i - 1] < tieVal) && nums[i + 1] < tieVal) {
                swap(nums, i, j);
                if (nums[j] > nums[j - 1]) {
                    swap(nums, j, j - 1);
                } else {
                    if (j + 1 < n && nums[j] > nums[j + 1]) {
                        swap(nums, j, j + 1);
                    }
                    j += 2;
                }
            }
        }
    }

    private void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }

    // median of median + three-way partitioning
    // https://discuss.leetcode.com/topic/41464/step-by-step-explanation-of-index-mapping-in-java
    // time complexity: O(N), space complexity: O(1)
    // beats 49.13%(20 ms)
    public void wiggleSort2(int[] nums) {
        int n = nums.length;
        int median = findKthSmallest(nums, 0, n - 1, n / 2 + 1);
        for (int i = 0, left = 0, right = n - 1; i <= right; i++) {
            int index = mapIndex(i, n);
            if (nums[index] > median) {
                swap(nums, mapIndex(left++, n), index);
            }
            else if (nums[index] < median) {
                swap(nums, mapIndex(right--, n), index);
                i--;
            }
        }
    }

    // map indices like: 0, 1, 2, 3, 4, 5  to  1, 3, 5, 0, 2, 4
    private int mapIndex(int index, int n) {
        return (1 + 2 * index) % (n | 1);
    }

    // from KthLargest.java
    private int findKthSmallest(int[] nums, int start, int end, int k) {
        int len = end - start + 1;
        int pivot = nums[findPivot(nums, start, end, len / 2 + 1)];
        int i = start;
        for (int j = end; i < j; ) {
            while (i < j && nums[i] < pivot) {
                i++;
            }
            while (i < j && nums[j] > pivot) {
                j--;
            }
            if (i < j) {
                swap(nums, i++, j--);
            }
        }
        if (i + 1 == k + start) return pivot;

        if (i + 1 > k + start) return findKthSmallest(nums, start, i - 1, k);

        return findKthSmallest(nums, i, end, k - i + start);
    }

    // from KthLargest.java(note that the pivot is a ONLY Approximate value)
    private int findPivot(int[] nums, int start, int end, int k) {
        int len = end - start + 1;
        if (len <= 5) {
            Arrays.sort(nums, start, end + 1);
            return start + k - 1;
        }

        for (int i = 0; i < len / 5; i++) {
            int left = start + 5 * i;
            int right = Math.min(left + 4, end);
            int median = findPivot(nums, left, right, 3);
            swap(nums, median, start + i); // put median at start
        }
        return findPivot(nums, start, start + len / 5, len / 10 + 1);
    }

    // time complexity: O(N ^ 2), space complexity: O(N)
    // beats 1.88%(249 ms)
    public void wiggleSort3(int[] nums) {
        int n = nums.length;
        int median = getMedian(nums, n);
        for (int i = 0, left = 0, right = n - 1; i <= right; i++) {
            int index = mapIndex(i, n);
            if (nums[index] > median) {
                swap(nums, mapIndex(left++, n), index);
            }
            else if (nums[index] < median) {
                swap(nums, mapIndex(right--, n), index);
                i--;
            }
        }
    }

    // beats 5.22%(184 ms)
    private int getMedian(int[] nums, int n) {
        for (int start = 0, end = n - 1, target = n / 2; ;) {
            swap(nums, start, (start + end) / 2);
            int swapIndex = start;
            for (int i = start + 1; i <= end; i++) {
                if (nums[i] >= nums[start]) {
                    swap(nums, ++swapIndex, i);
                }
            }
            swap(nums, start, swapIndex);
            if (swapIndex - start == target) return nums[swapIndex];

            if (swapIndex - start > target) {
                end = swapIndex - 1;
            } else {
                target -= (swapIndex - start + 1);
                start = swapIndex + 1;
            }
        }
    }

    // time complexity: O(N * log(N)), space complexity: O(N)
    // beats 64.35%(7 ms)
    public void wiggleSort4(int[] nums) {
        Arrays.sort(nums);

        int n = nums.length;
        int[] buffer = new int[n];
        for (int i = 0, j = (n + 1) / 2, k = n; i < n; i++) {
            buffer[i] = (i & 1) == 0 ?  nums[--j] : nums[--k];
        }
        System.arraycopy(buffer, 0, nums, 0, n);
    }

    @FunctionalInterface
    interface Function<A> {
        public void apply(A a);
    }

    void test(Function<int[]> sort, String name, int[] nums, int ... expected) {
        nums = nums.clone();
        long t1 = System.nanoTime();
        sort.apply(nums);
        if (nums.length > 1000) {
            System.out.format("%s: %.3f ms\n", name,
                              (System.nanoTime() - t1) * 1e-6);
        }
        for (int i = 1; i < nums.length; i += 2) {
            assertTrue("left smaller index: " + (i - 1), nums[i] > nums[i - 1]);
            if (i < nums.length - 1) {
                assertTrue("right smaller index: " + (i + 1), nums[i] > nums[i + 1]);
            }
        }
    }

    void test(int[] nums, int ... expected) {
        WiggleSort2 w = new WiggleSort2();
        test(w::wiggleSort, "wiggleSort", nums, expected);
        test(w::wiggleSort2, "wiggleSort2", nums, expected);
        test(w::wiggleSort3, "wiggleSort3", nums, expected);
        test(w::wiggleSort4, "wiggleSort4", nums, expected);
    }

    @Test
    public void test1() {
        test(new int[] {4, 5, 1, 3, 3, 3, 2});
        test(new int[] {1, 2, 1, 3, 1, 2, 2});
        test(new int[] {1, 3, 2, 2, 3, 1});
        test(new int[] {5, 3, 1, 2, 6, 7, 8, 5, 5});
        test(new int[] {4, 5, 5, 6});
        test(new int[] {1, 5, 1, 1, 6, 4});
        test(new int[] {2, 2, 2, 3, 2, 2, 3, 1, 1, 3, 1, 3, 3, 2, 1, 2, 2, 1,
                        2, 3, 3, 3, 2});
        test(new int[] {
            9, 4, 8, 2, 5, 10, 4, 4, 2, 7, 8, 8, 10, 4, 10, 10, 2, 6, 4, 9, 3,
            5, 9, 8, 3, 3, 10, 3, 5, 7, 2, 9, 10, 1, 9, 7, 9, 8, 8, 7, 1, 3, 9,
            5, 2, 1, 9, 3, 4, 6, 9, 5, 7, 10, 3, 10, 3, 9, 1, 2, 1, 7, 3, 4, 2,
            8, 7, 4, 4, 7, 10, 2, 4, 1, 3, 7, 9, 8, 9, 6, 3, 6, 6, 1, 6, 6, 3,
            9, 1, 5, 9, 2, 3, 10, 10, 3, 2, 10, 9, 6, 5, 3, 4, 5, 8, 7, 8, 8, 6,
            3, 10, 10, 5, 8, 9, 10, 2, 3, 8, 7, 4, 10, 9, 10, 8, 8, 9, 9, 3, 10,
            8, 3, 8, 3, 3, 4, 1, 6, 4, 5, 5, 4, 8, 3, 3, 5, 3, 3, 1, 2, 3, 4, 6,
            8, 1, 9, 8, 9, 10, 8, 2, 10, 8, 9, 8, 8, 2, 9, 8, 5, 1, 9, 2, 3, 2,
            4, 6, 10, 9, 10, 4, 6, 2, 5, 2, 10, 8, 4, 5, 3, 8, 7, 9, 1, 10, 5,
            8, 10, 8, 2, 6, 10, 1, 3, 7, 7, 6, 5, 4, 5, 7, 2, 5, 9, 9, 5, 7, 1,
            5, 4, 3, 2, 3, 8, 9, 3, 7, 6, 2, 5, 6, 6, 3, 7, 7, 6, 4, 1, 2, 1, 9,
            8, 4, 7, 10, 3, 4, 8, 4, 1, 1, 3, 4, 6, 9, 10, 5, 8, 1, 3, 8, 1, 1,
            1, 6, 3, 9, 7, 1, 9, 8, 4, 10, 6, 1, 6, 3, 5, 8, 9, 2, 4, 6, 8, 5,
            5, 3, 9, 4, 8, 9, 1, 2, 9, 4, 10, 10, 5, 5, 5, 9, 1, 3, 2, 9, 2, 10,
            9, 2, 9, 2, 7, 4, 9, 8, 2, 10, 6, 7, 1, 9, 1, 4, 3, 6, 6, 1, 1, 4, 6,
            4, 5, 6, 8, 7, 3, 3, 8, 2, 1, 10, 1, 5, 4, 2, 7, 7, 2, 5, 9, 1, 2,
            8, 3, 2, 4, 1, 6, 6, 7, 3, 2, 3, 10, 6, 10, 2, 7, 7, 5, 8, 8, 1, 4,
            9, 1, 1, 6, 9, 6, 10, 8, 1, 10, 8, 1, 2, 6, 5, 5, 2, 6, 8, 7, 6, 9,
            7, 9, 5, 10, 3, 1, 4, 4, 7, 7, 10, 8, 3, 6, 5, 9, 1, 10, 2, 3, 8,
            6, 1, 7, 4, 1, 4, 3, 4, 6, 6, 5, 7, 3, 6, 10, 10, 7, 5, 2, 4, 6, 6,
            5, 6, 2, 4, 5, 9, 8, 9, 9, 10, 2, 5, 6, 9, 7, 8, 9, 9, 6, 4, 8, 7,
            8, 4, 7, 9, 2, 8, 4, 5, 1, 5, 2, 6, 3, 8, 9, 6, 8, 3, 2, 7, 3, 1,
            8, 2, 4, 9, 4, 2, 1, 1, 7, 3, 8, 1, 9, 9, 8, 10, 8, 6, 5, 10, 9, 6,
            10, 8, 2, 7, 2, 8, 10, 7, 1, 2, 6, 2, 8, 8, 4, 4, 7, 3, 4, 7, 9, 9,
            2, 5, 4, 5, 5, 2, 8, 6, 10, 5, 5, 10, 9, 7, 10, 2, 5, 7, 8, 10, 2,
            8, 10, 2, 9, 5, 9, 9, 6, 9, 1, 4, 10, 2, 2, 10, 8, 10, 1, 7, 3, 6,
            8, 3, 3, 7, 9, 9, 3, 9, 6, 2, 5, 2, 8, 5, 5, 6, 4, 6, 1, 1, 6, 8,
            7, 3, 8, 4, 9, 8, 7, 7, 4, 10, 8, 8, 9, 4, 8, 2, 10, 6, 10, 7, 6,
            6, 2, 5, 2, 5, 5, 2, 8, 8, 6, 6, 7, 4, 7, 1, 8, 2, 6, 10, 5, 10, 8,
            4, 4, 8, 1, 6, 9, 5, 1, 8, 6, 9, 5, 10, 6, 10, 8, 8, 9, 4, 1, 10,
            1, 10, 8, 4, 4, 5, 2, 10, 2, 1, 6, 2, 8, 10, 10, 2, 2, 6, 7, 10, 1,
            5, 1, 5, 2, 2, 1, 3, 6, 1, 4, 5, 3, 2, 1, 8, 1, 7, 1, 6, 7, 7, 4, 2,
            10, 2, 6, 4, 2, 2, 4, 9, 7, 5, 7, 4, 3, 10, 7, 9, 4, 3, 3, 3, 10, 8,
            3, 7, 7, 8, 8, 6, 4, 7, 4, 6, 10, 4, 7, 10, 9, 10, 8, 9, 5, 2, 9, 9,
            1, 6, 9, 7, 10, 10, 8, 8, 2, 7, 7, 6, 9, 6, 3, 8, 8, 2, 2, 5, 9, 5,
            1, 10, 4, 1, 9, 9, 2, 5, 3, 7, 7, 4, 3, 8, 7, 5, 8, 9, 4, 7, 7, 6,
            5, 1, 10, 1, 5, 5, 8, 1, 1, 7, 6, 8, 9, 4, 9, 2, 5, 9, 10, 6, 8, 4,
            9, 2, 6, 7, 6, 8, 6, 3, 8, 1, 8, 1, 1, 7, 6, 3, 5, 8, 3, 3, 4, 9, 4,
            3, 5, 7, 9, 2, 5, 10, 10, 1, 5, 10, 6, 10, 4, 9, 6, 7, 10, 8, 6, 5,
            4, 7, 5, 6, 2, 2, 3, 8, 5, 10, 9, 9, 6, 1, 10, 1, 8, 5, 2, 6, 7, 9,
            4, 5, 6, 4, 8, 1, 5, 2, 5, 7, 7, 9, 5, 9, 4, 6, 10, 7, 7, 4, 9, 1,
            2, 4, 4, 8, 3, 6, 6, 5, 5, 4, 8, 3, 4, 9, 8, 8, 3, 1, 10, 7, 5, 5,
            2, 1, 3, 1, 4, 3, 8, 7, 9, 2, 1, 6, 2, 5, 7, 6, 6, 8, 10, 1, 2, 10,
            1, 7, 6, 10, 6, 8, 1, 5, 2, 5, 3, 7, 1, 6, 4, 2, 10, 5, 3, 3, 2, 10,
            9, 4, 2, 10, 4, 3, 1, 9, 9, 5, 2, 1, 2, 7, 6, 4, 10, 1, 6, 9, 3, 6,
            2, 1, 3, 3, 1, 6, 9, 9, 6, 4, 8, 3, 3, 8, 8, 7, 8, 9, 6, 9, 5, 7, 4,
            10, 2, 5, 8, 6, 5, 2, 10, 6, 7, 5, 4, 8, 3, 9, 6, 3, 10, 8, 3, 1, 4,
            10, 10, 3, 7, 5, 2, 8, 8, 1, 4, 8, 9, 4, 8, 6, 2, 9, 4, 8, 5, 1, 6,
            1, 9, 7, 7, 5, 10, 6, 7, 8, 9, 2, 10, 1, 2, 8, 9, 2, 4, 3, 8, 3, 5,
            4, 9, 9, 10, 6, 7, 5, 5, 1, 2, 4, 1, 9, 10, 8, 8, 5, 6, 4, 9, 5, 4,
            3, 5, 7, 2, 2, 8, 7, 8, 7, 8, 4, 4, 9, 1, 5, 5, 4, 3, 6, 1, 3, 1, 3,
            6, 5, 3, 10, 5, 7, 8, 4, 2, 6, 6, 4, 8, 1, 8, 6, 5, 1, 4, 8, 5, 10,
            8, 10, 4, 4, 5, 3, 8, 3, 2, 5, 10, 2, 8, 8, 4, 2, 1, 8, 8, 8, 6, 2,
            6, 5, 6, 7, 7, 1, 3, 3, 8, 7, 9, 9, 10, 9, 7, 2, 8, 10, 9, 3, 8, 2,
            9, 1, 6, 3, 5, 3, 10, 1, 6, 10, 4, 9, 4, 1, 3, 1, 7, 8, 10, 6, 4, 5,
            2, 4, 7, 10, 9, 8, 6, 8, 1, 1, 8, 2, 4, 5, 10, 9, 6, 3, 6, 2, 8, 7,
            3, 8, 1, 10, 5, 5, 3, 9, 6, 8, 7, 1, 1, 2, 8, 5, 5, 2, 3, 3, 10, 6,
            3, 5, 2, 4, 10, 7, 6, 5, 5, 10, 6, 10, 2, 4, 4, 9, 1, 4, 10, 5, 5,
            10, 4, 10, 3, 1, 1, 9, 9, 3, 6, 9, 8, 6, 3, 8, 3, 5, 1, 2, 2, 8, 5,
            9, 10, 10, 8, 3, 7, 3, 10, 6, 7, 7, 1, 1, 1, 7, 10, 6, 9, 2, 2, 4,
            10, 3, 2, 4, 7, 10, 6, 1, 8, 8, 4, 2, 3, 6, 9, 5, 7, 7, 8, 7, 1, 2,
            10, 4, 2, 1, 2, 3, 8, 6, 7, 4, 10, 6, 6, 3, 3, 5, 2, 7, 8, 9, 6,
            10, 5, 7, 4, 2, 4, 9, 1, 2, 6, 10, 7, 1, 1, 7, 8, 8, 10, 4, 2, 3,
            9, 8, 1, 1, 5, 5, 1, 3, 8, 3, 5, 10, 10, 6, 2, 3, 9, 1, 1, 9, 8,
            9, 9, 1, 7, 9, 5, 1, 1, 1, 5, 4, 2, 7, 3, 10, 10, 1, 5, 7, 10, 10,
            5, 2, 2, 7, 6, 8, 7, 10, 8, 8, 2, 8, 3, 3, 1, 5, 5, 7, 3, 6, 7, 8,
            1, 1, 5, 8, 10, 1, 3, 8, 7, 7, 7, 8, 3, 3, 2, 2, 8, 7, 1, 1, 8, 10,
            6, 2, 1, 2, 8, 9, 8, 10, 10, 6, 9, 4, 9, 5, 1, 2, 10, 3, 4, 4, 10,
            8, 3, 1, 10, 8, 6, 4, 9, 5, 4, 9, 4, 6, 9, 10, 7, 8, 6, 8, 2, 6, 8,
            3, 9, 8, 3, 9, 8, 5, 8, 6, 10, 2, 2, 8, 9, 9, 2, 8, 6, 5, 4, 2, 5,
            6, 2, 8, 2, 4, 3, 4, 5, 10, 9, 2, 2, 1, 5, 9, 5, 9, 7, 10, 5, 5, 4,
            7, 10, 7, 1, 4, 2, 3, 2, 7, 6, 9, 7, 9, 2, 9, 7, 1, 9, 6, 10, 7, 7,
            6, 10, 9, 6, 3, 10, 9, 6, 6, 1, 9, 3, 7, 8, 10, 4, 5, 8, 8, 8, 1, 5,
            6, 5, 1, 7, 8, 2, 3, 4, 4, 8, 2, 2, 9, 10, 1, 2, 6, 8, 9, 3, 3, 2,
            6, 4, 10, 10, 4, 4, 2, 9, 5, 9, 7, 5, 3, 1, 2, 9, 5, 3, 3, 3, 7, 5,
            4, 4, 10, 10, 3, 1, 10, 8, 3, 4, 2, 9, 4, 6, 5, 2, 6, 9, 10, 3, 9,
            5, 2, 4, 6, 2, 10, 4, 3, 3, 5, 2, 5, 6, 9, 4, 3, 3, 3, 7, 4, 4, 7,
            9, 8, 1, 10, 6, 6, 7, 2, 1, 6, 3, 1, 10, 5, 10, 7, 5, 7, 8, 3, 10,
            9, 10, 7, 1, 10, 5, 10, 6, 5, 9, 8, 1, 3, 8, 4, 10, 3, 2, 4, 2, 3,
            6, 6, 4, 5, 10, 7, 5, 9, 5, 3, 5, 5, 5, 1, 7, 6, 3, 8, 6, 10, 3, 9,
            2, 9, 7, 10, 1, 2, 10, 1, 3, 5, 9, 9, 4, 9, 2, 5, 5, 8, 4, 7, 6, 4,
            10, 1, 9, 9, 1, 7, 7, 8, 8, 10, 3, 8, 10, 5, 9, 10, 10, 7, 9, 10,
            8, 2, 9, 2, 5, 8, 6, 4, 9, 4, 8, 8, 3, 1, 8, 7, 10, 5, 2, 1, 9, 1,
            8, 8, 4, 9, 1, 6, 3, 5, 6, 9, 3, 5, 6, 8, 2, 8, 9, 6, 5, 2, 3, 8,
            10, 10, 5, 3, 1, 3, 9, 8, 9, 6, 8, 4, 3, 10, 9, 3, 3, 10, 3, 5, 10,
            9, 9, 1, 7, 9, 1, 2, 1, 3, 10, 7, 3, 9, 7, 3, 2, 1, 6, 3, 9, 10, 1,
            4, 4, 2, 8, 5, 8, 7, 9, 2, 10, 5, 7, 6, 6, 6, 9, 7, 3, 8, 7, 4, 4,
            1, 8, 1, 7, 5, 7, 6, 1, 5, 3, 2, 3, 8, 2, 5, 9, 8, 9, 2, 4, 4, 7, 9,
            8, 10, 10, 6, 1, 9, 6, 10, 3, 1, 8, 3, 4, 8, 1, 6, 7, 3, 3, 4, 8, 8,
            8, 4, 1, 8, 7, 5, 10, 4, 9, 7, 2, 6, 5, 8, 10, 2, 8, 7, 9, 5, 6, 3,
            2, 9, 9, 1, 1, 3, 9, 6, 4, 2, 1, 7, 2, 5, 1, 5, 4, 9, 5, 3, 2, 1, 2,
            2, 6, 2, 7, 8, 7, 6, 4, 4, 6, 9, 8, 7, 2, 2, 9, 7, 6, 3, 9, 1, 1,
            10, 2, 9, 5, 1, 1, 3, 7, 1, 2, 10, 10, 9, 2, 8, 1, 9, 6, 8, 2, 6,
            1, 9, 7, 10, 6, 2, 2, 1, 8, 9, 3, 2, 10, 5, 7, 9, 1, 6, 7, 1, 1, 3,
            4, 1, 7, 10, 1, 2, 1, 7, 6, 7, 6, 6, 1, 4, 3, 7, 2, 4, 6, 9, 6, 1,
            1, 1, 4, 2, 10, 2, 8, 10, 2, 5, 4, 4, 10, 7, 7, 2, 7, 5, 5, 2, 9,
            8, 1, 3, 5, 9, 5, 3, 9, 10, 8, 7, 3, 3, 7, 1, 9, 1, 4, 10, 5, 10, 1,
            1, 5, 1, 5, 10, 9, 6, 10, 6, 10, 3, 5, 7, 3, 2, 1, 6, 9, 3, 2, 8, 4,
            10, 5, 2, 6, 7, 7, 9, 3, 6, 2, 10, 2, 3, 7, 10, 6, 9, 1, 3, 4, 8, 9,
            7, 3, 1, 10, 3, 6, 6, 5, 2, 5, 4, 8, 5, 8, 2, 1, 4, 1, 3, 7, 1, 5,
            7, 6, 5, 1, 4, 10, 9, 8, 1, 9, 6, 3, 6, 3, 7, 8, 5, 3, 7, 6, 6, 8,
            2, 10, 5, 2, 3, 10, 6, 6, 5, 3, 9, 7, 4, 4, 1, 7, 7, 10, 10, 6, 9,
            6, 6, 1, 6, 7, 1, 7, 1, 9, 3, 8, 10, 8, 10, 4, 2, 2, 5, 2, 6, 4, 9,
            4, 9, 1, 8, 7, 1, 5, 8, 1, 1, 4, 10, 8, 10, 2, 8, 2, 6, 1, 10, 2, 5,
            5, 2, 7, 7, 9, 4, 5, 10, 1, 5, 1, 9, 9, 1, 1, 7, 5, 5, 7, 10, 1, 10,
            10, 7, 10, 1, 10, 10, 6, 2, 3, 3, 1, 10, 8, 8, 2, 3, 9, 10, 2, 2, 7,
            7, 5, 10, 1, 7, 2, 6, 4, 4, 4, 4, 10, 10, 7, 5, 1, 8, 9, 7, 2, 1,
            10, 9, 1, 9, 8, 4, 3, 8, 7, 2, 1, 9, 4, 2, 5, 4, 2, 5, 4, 6, 1, 1,
            6, 5, 4, 10, 10, 4, 6, 4, 4, 5, 10, 2, 7, 6, 3, 6, 4, 2, 3, 6, 10,
            4, 5, 7, 9, 8, 7, 1, 7, 9, 3, 3, 2, 4, 3, 7, 2, 6, 8, 9, 8, 7, 9, 9,
            9, 9, 9, 7, 6, 1, 4, 5, 6, 5, 7, 1, 10, 1, 6, 9, 3, 2, 1, 4, 8, 10,
            1, 1, 5, 7, 7, 4, 1, 3, 9, 5, 7, 9, 3, 7, 7, 1, 3, 7, 5, 1, 9, 3, 1,
            2, 1, 9, 2, 4, 2, 4, 4, 7, 2, 1, 5, 8, 2, 9, 8, 2, 10, 1, 9, 6, 2,
            6, 2, 8, 9, 5, 2, 4, 5, 2, 4, 1, 5, 10, 1, 3, 10, 9, 8, 2, 9, 4, 3,
            9, 6, 5, 2, 1, 2, 4, 10, 2, 7, 2, 1, 4, 8, 7, 2, 8, 7, 6, 6, 8, 7,
            8, 10, 8, 7, 5, 8, 9, 2, 9, 8, 5, 8, 4, 8, 3, 9, 5, 3, 6, 8, 1, 10,
            10, 6, 9, 3, 7, 6, 8, 1, 8, 9, 7, 6, 6, 2, 1, 10, 7, 9, 7, 1, 9, 7,
            2, 6, 10, 7, 6, 6, 1, 4, 6, 10, 4, 1, 9, 1, 8, 4, 2, 1, 9, 6, 1, 6,
            9, 8, 1, 6, 1, 10, 10, 10, 8, 2, 3, 1, 6, 8, 8, 8, 5, 3, 5, 10, 6,
            7, 3, 9, 9, 8, 2, 9, 3, 6, 8, 6, 1, 6, 1, 8, 2, 3, 7, 5, 7, 8, 1,
            2, 3, 10, 10, 2, 3, 10, 4, 6, 7, 4, 2, 2, 2, 2, 4, 5, 5, 5, 1, 5,
            7, 1, 1, 10, 6, 10, 9, 7, 4, 10, 1, 8, 8, 1, 1, 2, 2, 7, 6, 8, 3,
            10, 10, 7, 6, 3, 5, 8, 9, 9, 6, 6, 3, 5, 9, 5, 7, 1, 2, 5, 7, 1, 2,
            8, 2, 1, 8, 8, 7, 7, 8, 9, 9, 7, 2, 2, 4, 9, 5, 9, 7, 8, 6, 5, 7, 8,
            2, 9, 6, 6, 3, 7, 3, 4, 8, 5, 10, 3, 1, 7, 10, 1, 8, 5, 9, 5, 9, 7,
            3, 5, 2, 6, 2, 3, 6, 4, 3, 7, 6, 6, 5, 2, 2, 7, 9, 2, 10, 6, 8, 5,
            1, 6, 8, 8, 3, 3, 9, 7, 6, 3, 10, 4, 2, 7, 10, 2, 3, 2, 7, 3, 5, 7,
            2, 1, 8, 1, 4, 5, 9, 8, 2, 6, 3, 3, 4, 10, 7, 8, 5, 6, 2, 5, 9, 3,
            1, 8, 1, 6, 1, 1, 7, 9, 1, 5, 2, 8, 3, 9, 1, 2, 9, 2, 4, 3, 4, 1,
            4, 1, 2, 9, 1, 10, 7, 5, 8, 5, 10, 2, 2, 6, 3, 6, 7, 7, 6, 4, 5, 9,
            5, 7, 8, 1, 9, 8, 6, 4, 1, 7, 5, 6, 7, 5, 4, 6, 8, 1, 8, 5, 5, 3, 1,
            8, 9, 2, 1, 10, 2, 6, 9, 4, 3, 2, 9, 7, 2, 1, 5, 10, 2, 3, 8, 4, 8,
            7, 9, 4, 8, 5, 7, 6, 6, 1, 10, 8, 3, 1, 3, 3, 9, 3, 4, 10, 3, 5, 7,
            2, 8, 9, 8, 4, 6, 1, 4, 5, 8, 8, 10, 7, 2, 1, 7, 9, 9, 10, 3, 10, 5,
            10, 7, 7, 8, 2, 9, 5, 4, 3, 8, 1, 3, 8, 8, 8, 5, 10, 7, 1, 6, 5, 10,
            1, 1, 3, 4, 1, 6, 2, 10, 1, 8, 1, 5, 6, 9, 2, 10, 4, 6, 10, 8, 5, 3,
            3, 9, 8, 5, 3, 1, 5, 4, 5, 4, 1, 3, 8, 1, 2, 9, 3, 2, 2, 8, 1, 2, 1,
            10, 3, 3, 10
        });
        test(new int[] {
            3,  6,  6,  7, 2, 9, 10, 8, 8, 10, 3, 4, 7, 8, 9, 5, 6, 8, 8, 4, 7,
            3, 7, 7, 5, 10, 4, 2, 8, 9, 5, 1, 8, 4, 8, 10, 6, 5, 5, 9, 6, 5, 2,
            1, 4, 3, 9, 1, 3, 7, 6, 4, 4, 9, 1, 5, 3, 5, 1, 10, 1, 10, 10, 6, 5,
            9, 10, 8, 1, 1, 10, 4, 1, 4, 4, 2, 7, 6, 2, 2, 1, 9, 7, 9, 9, 5, 5,
            10, 2, 9, 3, 3, 9, 6, 2, 4, 6, 10, 1, 2, 6, 1, 2, 2, 7, 7, 1, 4, 7,
            3, 4, 7, 1, 7, 7, 10, 9, 8, 3, 2, 5, 3, 6, 9, 9, 7, 4, 4, 4, 6, 7,
            3, 9, 6, 2, 1, 9, 3, 3, 2, 1, 4, 8, 3, 5, 3, 4, 5, 2, 6, 6, 3, 9, 8,
            8, 7, 4, 7, 5, 3, 6, 5, 1, 5, 10, 1, 1, 9, 10, 10, 9, 1, 2, 9, 5,
            10, 4, 2, 5, 2, 4, 10, 6, 1, 4, 5, 1, 1, 2, 4, 2, 1, 6, 1, 10, 8, 9,
            6, 8, 7, 6, 8, 7, 4, 6, 10, 2, 8, 5, 4, 4, 1, 2, 8, 9, 8, 4, 10, 8,
            1, 3, 5, 1, 6, 7, 9, 8, 6, 4, 2, 3, 8, 4, 4, 8, 10, 7, 10, 8, 10, 8,
            10, 7, 3, 6, 9, 9, 9, 10, 8, 3, 8, 1, 3, 5, 5, 8, 5, 5, 7, 6, 3, 1,
            9, 9, 6, 3, 7, 1, 7, 4, 7, 2, 5, 10, 7, 8, 9, 8, 3, 5, 1, 2, 9, 8,
            10, 5, 1, 3, 3, 2, 3, 2, 7, 3, 6, 7, 8, 5, 10, 6, 4, 8, 1, 4, 8, 8,
            7, 10, 1, 5, 6, 10, 2, 7, 2, 5, 5, 9, 7, 1, 4, 6, 6, 6, 8, 7, 9, 7,
            3, 1, 5, 7, 7, 5, 9, 7, 2, 3, 5, 5, 1, 2, 2, 2, 7, 2, 9, 10, 10, 3,
            5, 5, 2, 3, 1, 2, 1, 10, 5, 4, 10, 7, 6, 7, 8, 10, 5, 1, 4, 9, 4, 7,
            6, 7, 10, 5, 7, 6, 9, 5, 2, 10, 1, 9, 6, 6, 4, 10, 4, 8, 10, 6, 5,
            6, 8, 10, 8, 4, 2, 8, 9, 6, 8, 8, 10, 4, 5, 3, 8, 1, 4, 3, 9, 2, 9,
            2, 9, 9, 5, 2, 6, 10, 1, 4, 10, 6, 9, 10, 5, 10, 5, 8, 9, 10, 1, 7,
            7, 8, 8, 1, 6, 1, 8, 4, 4, 2, 1, 1, 6, 5, 9, 3, 3, 8, 5, 1, 4, 3, 8,
            9, 3, 10, 4, 6, 7, 6, 3, 2, 5, 3, 7, 6, 8, 2, 6, 10, 9, 9, 5, 3, 1,
            4, 7, 7, 9, 8, 10, 7, 5, 7, 4, 1, 8, 7, 7, 6, 7, 7, 8, 5, 4, 2, 4,
            3, 2, 6, 3, 6, 6, 1, 4, 6, 8, 7, 9, 6, 2, 1, 7, 9, 5, 1, 3, 5, 3,
            8, 9, 2, 6, 5, 8, 1, 10, 4, 10, 3, 2, 4, 9, 8, 7, 1, 2, 6, 10, 1, 3,
            3, 7, 9, 8, 2, 5, 1, 7, 1, 1, 6, 5, 9, 3, 5, 1, 6, 9, 8, 6, 10, 1,
            2, 4, 10, 4, 3, 6, 9, 6, 4, 5, 8, 10, 7, 4, 3, 3, 7, 2, 1, 4, 2, 5,
            6, 6, 9, 1, 2, 10, 9, 6, 5, 10, 4, 4, 9, 1, 9, 3, 2, 3, 6, 6, 4, 2,
            7, 7, 4, 8, 7, 3, 2, 2, 7, 2, 2, 8, 10, 10, 8, 5, 8, 6, 7, 3, 8, 4,
            1, 4, 8, 5, 5, 2, 4, 3, 3, 5, 7, 2, 3, 5, 9, 8, 2, 7, 1, 2, 7, 7, 6,
            2, 6, 1, 5, 7, 2, 8, 6, 7, 4, 9, 9, 2, 6, 3, 8, 8, 1, 5, 4, 8, 2, 5,
            10, 7, 3, 9, 5, 8, 10, 3, 10, 5, 6, 10, 9, 4, 1, 8, 7, 3, 8, 6, 8,
            9, 8, 8, 6, 9, 8, 2, 10, 1, 6, 2, 1, 2, 6, 5, 10, 9, 2, 5, 5, 10,
            10, 10, 7, 10, 5, 1, 1, 6, 10, 7, 7, 7, 4, 8, 6, 5, 10, 9, 8, 10, 9,
            5, 8, 5, 5, 2, 6, 7, 1, 8, 8, 7, 5, 10, 9, 3, 8, 5, 6, 7, 7, 4, 10,
            7, 7, 4, 10, 2, 6, 6, 2, 5, 7, 2, 4, 2, 6, 10, 4, 2, 2, 3, 2, 2, 2,
            8, 8, 3, 1, 7, 6, 3, 6, 6, 3, 1, 10, 1, 8, 2, 9, 2, 7, 10, 5, 4, 10,
            6, 10, 2, 2, 3, 6, 5, 3, 10, 8, 9, 6, 7, 3, 7, 1, 10, 5, 1, 4, 5, 5,
            1, 4, 4, 3, 6, 10, 10, 10, 10, 4, 3, 9, 2, 9, 1, 8, 9, 4, 4, 1, 8,
            5, 4, 2, 6, 7, 2, 8, 10, 10, 6, 7, 7, 9, 3, 4, 10, 1, 2, 1, 8, 9,
            1, 1, 3, 5, 10, 8, 2, 9, 2, 6, 7, 4, 5, 3, 6, 9, 3, 9, 5, 1, 9, 9,
            2, 7, 4, 2, 6, 5, 5, 3, 6, 4, 3, 5, 5, 8, 9, 6, 9, 10, 6, 4, 8, 6,
            6, 1, 10, 9, 4, 7, 5, 8, 4, 1, 7, 10, 10, 1, 2, 9, 9, 2, 7, 9, 1,
            1, 3, 3, 1, 1, 9, 9, 10, 5, 1, 7, 1, 6, 2, 9, 10, 1, 6, 6, 9, 7, 10,
            7, 3, 8, 4, 4, 4, 7, 7, 2, 9, 7, 1, 4, 6, 5, 3, 6, 1, 7, 10, 6, 8,
            9, 3, 9, 5, 2, 6, 6, 6, 10, 5, 9, 5, 7, 2, 1, 10, 6, 8, 7, 1, 2, 9,
            2, 6, 2, 6, 8, 8, 2, 9, 4, 8, 3, 8, 7, 3, 6, 1, 1, 9, 2, 1, 4, 8, 9,
            4, 7, 3, 8, 5, 8, 3, 10, 9, 1, 4, 10, 2, 3, 9, 8, 10, 10, 4, 10, 4,
            2, 3, 1, 2, 4, 2, 9, 5, 5, 8, 6, 10, 8, 5, 2, 6, 2, 5, 7, 7, 4, 1,
            4, 2, 7, 10, 8, 3, 1, 7, 9, 6, 6, 2, 5, 8, 9, 10, 3, 4, 2, 8, 4, 8,
            3, 1, 6, 6, 5, 10, 5, 5, 2, 9, 1, 2, 6, 4, 9, 2, 10, 8, 5, 9, 5, 6,
            2, 5, 3, 2, 6, 3, 6, 2, 8, 3, 6, 5, 7, 9, 1, 10, 3, 7, 1, 1, 10, 7,
            4, 8, 1, 6, 8, 7, 5, 6, 3, 5, 1, 1, 1, 6, 2, 7, 5, 8, 2, 2, 9, 8,
            10, 10, 6, 7, 1, 1, 4, 8, 5, 5, 10, 6, 6, 8, 5, 8, 3, 2, 10, 7, 10,
            3, 5, 2, 5, 7, 10, 9, 6, 9, 6, 9, 10, 5, 1, 9, 5, 1, 6, 8, 9, 7, 10,
            8, 10, 4, 10, 9, 4, 2, 9, 3, 3, 10, 7, 3, 3, 3, 8, 6, 10, 3, 8, 2,
            1, 9, 2, 7, 2, 7, 4, 5, 1, 2, 8, 6, 3, 1, 8, 7, 5, 2, 10, 6, 7, 10,
            8, 6, 6, 9, 7, 1, 2, 9, 2, 8, 6, 5, 2, 6, 10, 7, 3, 10, 8, 7, 8, 5,
            8, 1, 5, 9, 8, 7, 10, 2, 8, 6, 10, 4, 2, 2, 7, 8, 7, 1, 3, 9, 10, 4,
            6, 10, 9, 7, 5, 10, 10, 1, 4, 10, 1, 6, 3, 8, 6, 1, 6, 9, 9, 9, 6,
            9, 3, 10, 7, 1, 4, 8, 4, 9, 3, 1, 4, 6, 10, 10, 7, 1, 3, 5, 6, 7, 1,
            5, 3, 8, 6, 1, 1, 6, 2, 1, 5, 1, 7, 6, 10, 5, 5, 6, 10, 6, 6, 9, 8,
            8, 1, 4, 5, 6, 3, 4, 7, 8, 6, 8, 1, 9, 4, 5, 5, 3, 3, 5, 3, 1, 2, 10,
            6, 7, 2, 9, 8, 8, 6, 9, 7, 8, 2, 2, 3, 5, 4, 9, 9, 8, 10, 8, 4, 5, 7,
            2, 5, 4, 1, 9, 7, 2, 2, 9, 4, 3, 3, 3, 8, 5, 1, 8, 7, 1, 8, 5, 7, 7,
            4, 5, 6, 5, 9, 5, 5, 4, 8, 8, 1, 10, 2, 4, 4, 2, 10, 7, 1, 8, 4, 10,
            7, 4, 2, 3, 4, 10, 9, 3, 1, 9, 3, 1, 2, 7, 9, 3, 4, 2, 3, 1, 2, 8,
            2, 6, 5, 4, 10, 7, 3, 2, 10, 8, 6, 2, 2, 3, 6, 5, 3, 1, 4, 7, 4, 8,
            3, 1, 9, 2, 6, 2, 5, 8, 3, 4, 5, 8, 1, 4, 6, 6, 5, 9, 3, 1, 6, 1,
            10, 9, 9, 2, 10, 6, 10, 6, 1, 6, 2, 4, 6, 6, 4, 6, 3, 5, 10, 2, 9,
            6, 5, 8, 7, 9, 5, 8, 9, 3, 4, 2, 2, 5, 2, 4, 1, 10, 10, 2, 4, 2, 1,
            10, 6, 7, 7, 3, 10, 10, 2, 5, 1, 6, 8, 6, 10, 9, 4, 7, 5, 4, 4, 10,
            8, 6, 5, 3, 6, 3, 5, 7, 8, 2, 10, 3, 1, 1, 2, 10, 6, 4, 4, 8, 6, 6,
            2, 8, 2, 5, 4, 5, 3, 8, 3, 4, 6, 8, 7, 5, 7, 5, 5, 4, 8, 1, 7, 2, 7,
            3, 2, 1, 10, 2, 10, 9, 10, 10, 10, 8, 5, 10, 3, 10, 8, 7, 4, 1, 5,
            6, 9, 7, 5, 6, 3, 6, 3, 5, 2, 10, 4, 1, 2, 7, 9, 4, 10, 4, 7, 8, 1,
            2, 6, 7, 10, 10, 8, 5, 8, 4, 1, 4, 8, 6, 6, 2, 5, 9, 8, 1, 6, 3, 5,
            6, 6, 9, 9, 2, 2, 10, 1, 10, 9, 4, 8, 9, 3, 6, 1, 1, 10, 2, 4, 7, 5,
            6, 3, 7, 6, 6, 9, 8, 3, 5, 1, 6, 9, 5, 3, 1, 10, 5, 10, 8, 3, 2, 7,
            1, 4, 4, 1, 9, 4, 7, 9, 4, 2, 5, 10, 5, 8, 10, 6, 9, 1, 3, 10, 3, 8,
            3, 1, 7, 9, 5, 7, 2, 1, 5, 4, 6, 7, 7, 4, 4, 3, 1, 9, 6, 6, 1, 9, 6,
            3, 5, 2, 4, 4, 5, 3, 8, 9, 2, 2, 2, 3, 7, 8, 1, 8, 1, 10, 8, 6, 10,
            9, 2, 10, 2, 9, 2, 5, 5, 6, 9, 4, 7, 8, 5, 10, 7, 3, 7, 7, 6, 1, 1,
            6, 3, 1, 7, 10, 5, 4, 2, 9, 7, 9, 10, 2, 4, 10, 7, 5, 8, 7, 7, 3, 3,
            1, 3, 8, 10, 9, 1, 8, 4, 7, 4, 6, 9, 1, 9, 5, 2, 10, 10, 3, 8, 4, 8,
            4, 9, 6, 4, 3, 10, 7, 8, 10, 2, 8, 1, 1, 7, 9, 5, 8, 3, 5, 10, 8, 1,
            4, 1, 8, 6, 6, 5, 4, 3, 2, 8, 5, 10, 5, 8, 3, 3, 9, 7, 2, 5, 5, 3,
            7, 6, 1, 1, 10, 9, 3, 7, 10, 3, 5, 8, 1, 9, 1, 1, 3, 1, 9, 6, 8, 6,
            2, 10, 6, 8, 7, 10, 8, 8, 3, 7, 2, 1, 7, 3, 5, 3, 10, 10, 10, 1, 2,
            2, 9, 2, 8, 7, 7, 1, 5, 2, 1, 5, 6, 5, 7, 6, 10, 1, 4, 9, 6, 8, 8,
            6, 2, 7, 5, 1, 6, 9, 6, 8, 9, 8, 2, 4, 10, 8, 5, 3, 1, 8, 1, 9, 10,
            8, 4, 5, 1, 2, 2, 9, 1, 7, 2, 6, 10, 1, 6, 2, 2, 9, 2, 2, 2, 3, 4,
            7, 6, 7, 7, 7
        });
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("WiggleSort2");
    }
}
