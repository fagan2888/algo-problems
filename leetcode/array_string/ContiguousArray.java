import java.util.*;

import org.junit.Test;
import static org.junit.Assert.*;

// LC525: https://leetcode.com/problems/contiguous-array/
//
// Given a binary array, find the maximum length of a contiguous subarray with
// equal number of 0 and 1.
public class ContiguousArray {
    // Brute Force
    // time complexity: O(N ^ 2), space complexity: O(N)
    // Time Limit Exceeded
    public int findMaxLength0(int[] nums) {
        int n = nums.length;
        if (n < 2) return 0;

        int[] ones = new int[n + 1];
        for (int i = 0; i < n; i++) {
            ones[i + 1] = ones[i] + (nums[i] == 1 ? 1 : 0);
        }
        int max = 0;
        int step = 2;
        for (int i = 0; i < n; i++) {
            for (int j = step - 1; i + j < n; j++) {
                int one = ones[i + j + 1] - ones[i];
                if (one * 2 == j + 1) {
                    max = Math.max(max, j + 1);
                    step = max;
                }
            }
        }
        return max;
    }

    // Hash Table
    // time complexity: O(N), space complexity: O(1)
    // beats 74.69%(84 ms for 555 tests)
    public int findMaxLength(int[] nums) {
        int max = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>(){{ put(0, -1); }};
        for (int i = 0, diff = 0; i < nums.length; i++) {
            diff += (nums[i] == 1 ? 1 : -1);
            Integer first = map.putIfAbsent(diff, i);
            if (first != null && max < i - first) {
                max = i - first;
            }
        }
        return max;
    }

    void test(int[] nums, int expected) {
        assertEquals(expected, findMaxLength(nums));
    }

    @Test
    public void test() {
        test(new int[] {}, 0);
        test(new int[] {0}, 0);
        test(new int[] {0, 1}, 2);
        test(new int[] {0, 1, 0}, 2);
        test(new int[] {0, 1, 0, 1, 0}, 4);
        test(new int[] {0,0,1,0,0,0,1,1}, 6);
        test(new int[] {0, 1, 0, 1, 0, 1}, 6);
        test(new int[] {0, 0, 1, 0, 0, 0, 1, 1, 1}, 8);
        test(new int[] {
            1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,
            0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,
            1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,0,1,1,
            0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,
            1,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,
            0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,
            1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,
            0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1, 0,1,0,1,0,1,1,1,0,1,
            1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,
            0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,
            1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,1,
            0,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,1,1,
            1,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,
            1,1,1,0,1,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,
            1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,0,1,
            0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0, 0,0,0,1,1,0,0,1,0,1,1,0,1,
            0,1,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1,
            1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,
            1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,
            1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,
            1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,
            1,0,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,
            0,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,
            1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0, 1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,
            1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,
            1,0,1,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,1,1,
            1,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,
            0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,
            0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,
            1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,1
        }, 670);
    }

    public static void main(String[] args) {
        org.junit.runner.JUnitCore.main("ContiguousArray");
    }
}
